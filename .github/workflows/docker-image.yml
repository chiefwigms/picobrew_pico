name: Build and (optionally Push) Docker Images

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    if: ${{ github.ref != 'ref/heads/master' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@master
      with:
        platforms: all
    
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@master

    - name: Build Docker Image
      uses: docker/build-push-action@v3
      with:
        builder: ${{ steps.buildx.outputs.name }}
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64,linux/arm/v7
        tags: ${{ steps.prep.outputs.tags }}

  build-push:
    if: ${{ github.ref == 'ref/heads/master' }}
    environment: picobrew-server
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Prepare
      id: prep
      run: |
        DOCKER_IMAGE=${{ secrets.DOCKER_USERNAME }}/${GITHUB_REPOSITORY#*/}
        VERSION=latest
        SHORTREF=${GITHUB_SHA::8}

        # If this is git tag, use the tag name as a docker tag
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        fi
        TAGS="${DOCKER_IMAGE}:${VERSION},${DOCKER_IMAGE}:${SHORTREF}"

        # If the VERSION looks like a version number, assume that
        # this is the most recent version of the image and also
        # tag it 'latest'.
        if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
          TAGS="$TAGS,${DOCKER_IMAGE}:latest"
        fi

        # Set output parameters.
        echo ::set-output name=tags::${TAGS}
        echo ::set-output name=docker_image::${DOCKER_IMAGE}
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@master
      with:
        platforms: all
    
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@master
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push Docker Image
      uses: docker/build-push-action@v3
      with:
        builder: ${{ steps.buildx.outputs.name }}
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64,linux/arm/v7
        push: true
        tags: ${{ steps.prep.outputs.tags }}
